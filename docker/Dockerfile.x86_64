ARG BASE=nvidia/cuda:11.8.0-runtime-ubuntu20.04
FROM $BASE

ARG VER_CUDA=11.8.0
ARG VER_UBUNTU=20.04

# ENV VER_CUDA=${VER_CUDA}
# ENV VER_UBUNTU=${VER_UBUNTU}

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install software-properties-common -y --no-install-recommends && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-dev \
        python3-pytest \
        python3-pip \
        python3-distutils \
        python3.9 \
        python3.9-venv \
        python3.10 \
        python3.10-venv \
        python3.11 \
        python3.11-venv \
        python3.12 \
        python3.12-venv \
        python3.13 \
        python3.13-venv \
        libglib2.0-0 \
        libgl1 \
        libgomp1 \
        pandoc \
        make \
        wget \
        curl \
        doxygen \
        git \
        git-lfs \
        xz-utils \
    && rm -rf /var/lib/apt/lists/*

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    NVJPEG2K_VERSION=0.9.0.43 && \
    wget https://developer.download.nvidia.com/compute/nvjpeg2000/redist/libnvjpeg_2k/linux-x86_64/libnvjpeg_2k-linux-x86_64-${NVJPEG2K_VERSION}-archive.tar.xz && \
    tar -xf libnvjpeg_2k-linux-x86_64-${NVJPEG2K_VERSION}-archive.tar.xz && \
    cp -d libnvjpeg_2k-linux-x86_64-${NVJPEG2K_VERSION}-archive/lib/${CUDA_VERSION_MAJOR}/* /usr/local/cuda/lib64/ && \
    rm -r libnvjpeg_2k-linux-x86_64-${NVJPEG2K_VERSION}-archive libnvjpeg_2k-linux-x86_64-${NVJPEG2K_VERSION}-archive.tar.xz

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    test "$CUDA_VERSION_MAJOR" -gt 12 && CUDA_VERSION_MAJOR=12 || true && \
    NVTIFF_VERSION=0.5.1.75 && \
    wget https://developer.download.nvidia.com/compute/nvtiff/redist/libnvtiff/linux-x86_64/libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz && \
    tar -xf libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz && \
    cp -d libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive/lib/* /usr/local/cuda/lib64/ && \
    rm -r libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    test "$CUDA_VERSION_MAJOR" -gt 12 && CUDA_VERSION_MAJOR=12 || true && \
    NVCOMP_VERSION=5.0.0.6 && \
    echo "Installing nvcomp for cuda ${CUDA_VERSION_MAJOR}" && \
    wget https://developer.download.nvidia.com/compute/nvcomp/redist/nvcomp/linux-x86_64/nvcomp-linux-x86_64-${NVCOMP_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz && \
    tar -xf nvcomp-linux-x86_64-${NVCOMP_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz && \
    cp -d nvcomp-linux-x86_64-${NVCOMP_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive/lib/libnvcomp.so* /usr/local/cuda/lib64/ && \
    rm -r nvcomp-linux-x86_64-${NVCOMP_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive nvcomp-linux-x86_64-${NVCOMP_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1

# We install cupy 12.3, beacuse newer version uses jitify to compile kernels just in time which fails in our docker
# Numpy 2.0 was recently release and is not compatibile with newest cupy
# Newever version of docuitls removes functionality used by other packages
RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    test "$CUDA_VERSION_MAJOR" -gt 12 && CUDA_VERSION_MAJOR=12 || true && \
    python3 -m pip install \
    pytest \
    opencv-python \
    sphinx \
    sphinxcontrib-jquery \
    "docutils<0.21" \
    breathe \
    nbsphinx \
    nbsphinx_link \
    ipython \
    ipykernel \
    matplotlib \
    opencv-python \
    "numpy<2.0" \
    cucim \
    scipy \
    scikit-image \
    pynvml \
    nose \
    nose2 \
    cvcuda-cu${CUDA_VERSION_MAJOR} && \
    rm -rf /root/.cache/pip

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    if [ "$CUDA_VERSION_MAJOR" = "13" ]; then \
        python3 -m pip install --pre cupy-cuda12X -f https://pip.cupy.dev/pre; \
    else \
        python3 -m pip install cupy-cuda${CUDA_VERSION_MAJOR}x==12.3; \
    fi

# Pytorch
RUN CUDA_VERSION_SHORT=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\.([0-9]+)\..*/\1\2/') && \
    test $CUDA_VERSION_SHORT -gt 121 && \
        export PYTORCH_CU_VER=121 || \
        export PYTORCH_CU_VER=${CUDA_VERSION_SHORT}; \
    python3 -m pip install torch torchvision torchaudio \
        --index-url https://download.pytorch.org/whl/cu${PYTORCH_CU_VER}

# Tensorflow (only for CUDA 11.8)
RUN CUDA_VERSION_SHORT=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\.([0-9]+)\..*/\1\2/') && \
    test $CUDA_VERSION_SHORT -eq 118 && \
        python3 -m pip install tensorflow==2.14.0 || \
        echo "Skipping tensorflow for CUDA 11.8" && \
    test $CUDA_VERSION_SHORT -eq 122 && \
        python3 -m pip install tensorflow==2.15.0 || \
        echo "Skipping tensorflow for CUDA 12.2" && \
    test $CUDA_VERSION_SHORT -eq 123 && \
        python3 -m pip install tensorflow==2.16.1 || \
        echo "Skipping tensorflow for CUDA 12.3";

# DALI
ENV DALI_PATH="/opt/dali"
ENV DALI_EXTRA_PATH="/opt/dali_extra"
RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    test "$CUDA_VERSION_MAJOR" -gt 12 && CUDA_VERSION_MAJOR=12 || true && \
    # Install DALI
    python3 -m pip install --upgrade --force-reinstall pip && \
    python3 -m pip install nvidia-dali-cuda${CUDA_VERSION_MAJOR}0>=1.48.0 && \
    # Uninstall nvimagecodec pulled automatically
    python3 -m pip uninstall -y nvidia-nvimgcodec-cu${CUDA_VERSION_MAJOR} nvidia-nvjpeg2k-cu${CUDA_VERSION_MAJOR} nvidia-nvtiff-cu${CUDA_VERSION_MAJOR} nvidia-nvcomp-cu${CUDA_VERSION_MAJOR} || true && \
    mkdir -p /opt && \
    # Get installed DALI version
    export DALI_VERSION=$(pip show nvidia-dali-cuda${CUDA_VERSION_MAJOR}0 | sed -n 's/^Version: \(.*\)$/\1/p') && \
    # Fetch sources for the currently installed DALI version
    git clone https://github.com/NVIDIA/DALI.git ${DALI_PATH} && \
    cd ${DALI_PATH} && git checkout tags/v${DALI_VERSION} && cd - && \
    # Fetch DALI_extra for the current DALI sources
    git clone https://github.com/NVIDIA/DALI_extra.git ${DALI_EXTRA_PATH} && \
    cd ${DALI_EXTRA_PATH} && git checkout $(cat /opt/dali/DALI_EXTRA_VERSION) && cd -

WORKDIR /workspace
