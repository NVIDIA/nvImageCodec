ARG BASE=nvidia/cuda:11.8.0-runtime-ubuntu20.04
FROM $BASE

ARG VER_CUDA=11.8.0
ARG VER_UBUNTU=20.04

# ENV VER_CUDA=${VER_CUDA}
# ENV VER_UBUNTU=${VER_UBUNTU}

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install software-properties-common -y --no-install-recommends && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-dev \
        python3-pytest \
        python3-pip \
        python3-distutils \
        python3.9 \
        python3.9-venv \
        python3.10 \
        python3.10-venv \
        python3.11 \
        python3.11-venv \
        python3.12 \
        python3.12-venv \
        python3.13 \
        python3.13-venv \
        libglib2.0-0 \
        libgl1 \
        libgomp1 \
        pandoc \
        make \
        wget \
        curl \
        doxygen \
        git \
        git-lfs \
        xz-utils \
    && rm -rf /var/lib/apt/lists/*

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    NVJPEG2K_VERSION=0.8.0.38-1 && \
    apt-get update && \
    apt-get install wget software-properties-common -y && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub && \
    add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" && \
    apt-get update && \
    apt-get install libnvjpeg2k0-dev-cuda-${CUDA_VERSION_MAJOR}=${NVJPEG2K_VERSION} \
                    libnvjpeg2k0-cuda-${CUDA_VERSION_MAJOR}=${NVJPEG2K_VERSION} \
                    libnvjpeg2k0-static-cuda-${CUDA_VERSION_MAJOR}=${NVJPEG2K_VERSION} -y && \
    cp /usr/include/libnvjpeg2k/${CUDA_VERSION_MAJOR}/* /usr/local/cuda/include/ && \
    cp -d /usr/lib/x86_64-linux-gnu/libnvjpeg2k/${CUDA_VERSION_MAJOR}/* /usr/local/cuda/lib64/ && \
    rm -rf /var/lib/apt/lists/*

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    NVTIFF_VERSION=0.5.0.67 && \
    wget https://developer.download.nvidia.com/compute/nvtiff/redist/libnvtiff/linux-x86_64/libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz && \
    tar -xf libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz && \
    cp -d libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive/lib/* /usr/local/cuda/lib64/ && \
    rm -r libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive libnvtiff-linux-x86_64-${NVTIFF_VERSION}_cuda${CUDA_VERSION_MAJOR}-archive.tar.xz

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    NVCOMP_VERSION=4.0.1 && \
    echo "Installing nvcomp for cuda ${CUDA_VERSION_MAJOR}" && \
    wget https://developer.download.nvidia.com/compute/nvcomp/${NVCOMP_VERSION}/local_installers/nvcomp-linux-x86_64-${NVCOMP_VERSION}-cuda${CUDA_VERSION_MAJOR}.x.tar.gz && \
    tar -xf nvcomp-linux-x86_64-${NVCOMP_VERSION}-cuda${CUDA_VERSION_MAJOR}.x.tar.gz && \
    cp -d nvcomp/lib/libnvcomp.so* /usr/local/cuda/lib64/ && \
    rm -r nvcomp nvcomp-linux-x86_64-${NVCOMP_VERSION}-cuda${CUDA_VERSION_MAJOR}.x.tar.gz

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1

RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    mkdir cvcuda && \
    cd cvcuda && \
    wget https://github.com/CVCUDA/CV-CUDA/releases/download/v0.5.0-beta/nvcv_python-0.5.0_beta-cp39-cp39-linux_x86_64.whl && \
    python3 -m pip install ./nvcv_python-0.5.0_beta-cp39-cp39-linux_x86_64.whl && \
    cp /usr/local/lib/python3.9/dist-packages/python/* /usr/local/lib/python3.9/dist-packages/ && \
    wget https://github.com/CVCUDA/CV-CUDA/releases/download/v0.5.0-beta/nvcv-lib-0.5.0_beta-cuda${CUDA_VERSION_MAJOR}-x86_64-linux.deb && \
    dpkg -i nvcv-lib-0.5.0_beta-cuda${CUDA_VERSION_MAJOR}-x86_64-linux.deb

# We install cupy 12.3, beacuse newer version uses jitify to compile kernels just in time which fails in our docker
# Numpy 2.0 was recently release and is not compatibile with newest cupy
# Newever version of docuitls removes functionality used by other packages
RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    python3 -m pip install \
    pytest \
    cupy-cuda${CUDA_VERSION_MAJOR}x==12.3 \
    opencv-python \
    sphinx \
    sphinxcontrib-jquery \
    "docutils<0.21" \
    breathe \
    nbsphinx \
    nbsphinx_link \
    ipython \
    ipykernel \
    matplotlib \
    opencv-python \
    "numpy<2.0" \
    cucim \
    scipy \
    scikit-image \
    pynvml \
    nose \
    nose2 && \
    rm -rf /root/.cache/pip

# Pytorch
RUN CUDA_VERSION_SHORT=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\.([0-9]+)\..*/\1\2/') && \
    test $CUDA_VERSION_SHORT -gt 121 && \
        export PYTORCH_CU_VER=121 || \
        export PYTORCH_CU_VER=${CUDA_VERSION_SHORT}; \
    python3 -m pip install torch torchvision torchaudio \
        --index-url https://download.pytorch.org/whl/cu${PYTORCH_CU_VER}

# Tensorflow (only for CUDA 11.8)
RUN CUDA_VERSION_SHORT=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\.([0-9]+)\..*/\1\2/') && \
    test $CUDA_VERSION_SHORT -eq 118 && \
        python3 -m pip install tensorflow==2.14.0 || \
        echo "Skipping tensorflow for CUDA 11.8" && \
    test $CUDA_VERSION_SHORT -eq 122 && \
        python3 -m pip install tensorflow==2.15.0 || \
        echo "Skipping tensorflow for CUDA 12.2" && \
    test $CUDA_VERSION_SHORT -eq 123 && \
        python3 -m pip install tensorflow==2.16.1 || \
        echo "Skipping tensorflow for CUDA 12.3";

# DALI
ENV DALI_PATH="/opt/dali"
ENV DALI_EXTRA_PATH="/opt/dali_extra"
RUN CUDA_VERSION_MAJOR=$(echo "$VER_CUDA" | sed -E 's/^([0-9]+)\..*/\1/') && \
    # Install DALI
    python3 -m pip install nvidia-dali-cuda${CUDA_VERSION_MAJOR}0>=1.46.0 && \
    # Uninstall nvimagecodec pulled automatically
    python3 -m pip uninstall -y nvidia-nvimgcodec-cu${CUDA_VERSION_MAJOR} && \
    mkdir -p /opt && \
    # Get installed DALI version
    export DALI_VERSION=$(pip show nvidia-dali-cuda${CUDA_VERSION_MAJOR}0 | sed -n 's/^Version: \(.*\)$/\1/p') && \
    # Fetch sources for the currently installed DALI version
    git clone https://github.com/NVIDIA/DALI.git ${DALI_PATH} && \
    cd ${DALI_PATH}; git checkout tags/v${DALI_VERSION}; cd - && \
    # Fetch DALI_extra for the current DALI sources
    git clone https://github.com/NVIDIA/DALI_extra.git ${DALI_EXTRA_PATH} && \
    cd ${DALI_EXTRA_PATH}; git checkout $(cat /opt/dali/DALI_EXTRA_VERSION); cd -

WORKDIR /workspace
